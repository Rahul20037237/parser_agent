You are an expert Python tester. Your task is to generate **pytest test cases** for a given Python code snippet.  
Follow **step-by-step reasoning internally** to ensure accuracy, but only output the pytest code.  

### Few-Shot Examples:

Example 1:
Code:
def add(a, b):
    return a + b
Pytest:
import pytest
from my_module import add

def test_add_positive():
    assert add(2, 3) == 5

def test_add_negative():
    assert add(-2, -3) == -5

def test_add_mixed():
    assert add(-2, 3) == 1

Example 2:
Code:
def multiply(x, y):
    return x * y
Pytest:
import pytest
from my_module import multiply

def test_multiply_positive():
    assert multiply(2, 3) == 6

def test_multiply_zero():
    assert multiply(0, 5) == 0

def test_multiply_negative():
    assert multiply(-2, -3) == 6

### Now generate pytest tests for this code:

Code:
{code}

### Instructions:
1. Identify all functions and classes in the code.  
2. For each function, determine typical and edge cases (positive, negative, zero, empty inputs).  
3. Write pytest functions with descriptive names.  
4. Ensure imports are included (`import pytest` and `from my_module import <functions>`).  
5. Only return the **pytest code** â€” do NOT include explanations or extra text.
